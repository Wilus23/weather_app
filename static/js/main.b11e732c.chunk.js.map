{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","index.js"],"names":["Form","props","onSubmit","submit","type","value","onChange","change","placeholder","Result","weather","date","main","sunrise","sunset","temp","pressure","wind","city","content","err","sunriseTime","Date","toLocaleTimeString","tempConvertToCelcius","slice","toUpperCase","lenght","className","error","App","useState","setValue","state","setState","e","target","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","speed","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAgBeA,EAdF,SAACC,GACV,OACI,uBAAMC,SAAUD,EAAME,OAAtB,UACI,uBACAC,KAAK,OACLC,MAAOJ,EAAMI,MACbC,SAAUL,EAAMM,OAChBC,YAAY,iBAEZ,yDCkBGC,EA3BA,SAACR,GACZ,MAA0EA,EAAMS,QAAxEC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,QAASC,EAA7B,EAA6BA,OAAQC,EAArC,EAAqCA,KAAMC,EAA3C,EAA2CA,SAAUC,EAArD,EAAqDA,KAAMC,EAA3D,EAA2DA,KAEvDC,EAAU,KACd,IAHA,EAAiEC,KAGrDF,EAAK,CACb,IAAMG,EAAc,IAAIC,KAAa,IAART,GAAcU,qBAErCC,GADa,IAAIF,KAAY,IAAPR,GAAaS,qBACZR,EAAO,QACpCI,EACI,gCACI,0DAA6BD,EAAKO,MAAM,EAAE,GAAGC,cAAgBR,EAAKO,MAAM,EAAEP,EAAKS,WAC/E,2DAA8BhB,KAC9B,+CAAkBa,KAClB,wCAAWZ,KACX,8DAAoBS,KACpB,iDAAeL,KACf,yCAAYC,EAAZ,aAIZ,OACI,qBAAKW,UAAU,SAAf,SACK3B,EAAM4B,MAAN,0BAAiCX,GAASC,KC6CxCW,MA/Df,WACE,MAA0BC,mBAAS,IAAnC,mBAAO1B,EAAP,KAAc2B,EAAd,KACA,EAA0BD,mBAAS,CACjCpB,KAAM,GACNC,KAAM,GACNC,QAAS,GACTC,OAAQ,GACRC,KAAK,GACLC,SAAU,GACVC,KAAM,GACNC,KAAM,GACNE,KAAK,IATP,mBAAOa,EAAP,KAAcC,EAAd,KAiDA,OACE,sBAAKN,UAAU,MAAf,UACE,cAAC,EAAD,CACAvB,MAAOA,EACPE,OA1CsB,SAAC4B,GACzBH,EAASG,EAAEC,OAAO/B,QA0ChBF,OAvCqB,SAACgC,GACxBA,EAAEE,iBACF,IAAMC,EAAG,2DAAuDjC,EAAvD,kBApBE,oCAsBXkC,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAGA,EAASC,GACV,OAAOD,EAEP,MAAME,MAAM,8BAGfH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAIxB,MAAOyB,iBACxBb,EAAS,CACPL,OAAO,EACPlB,KAAMmC,EACNlC,KAAMiC,EAAKnC,QAAQ,GAAGE,KACtBC,QAASgC,EAAKG,IAAInC,QAClBC,OAAQ+B,EAAKG,IAAIlC,OACjBC,KAAM8B,EAAKjC,KAAKG,KAChBC,SAAU6B,EAAKjC,KAAKI,SACpBC,KAAM4B,EAAK5B,KAAKgC,MAChB/B,KAAMb,OAGT6C,OAAM,SAAA9B,GACLc,EAAS,CACPL,OAAO,EACPX,KAAMb,UAWV,cAAC,EAAD,CAAQK,QAASuB,EAAOJ,MAAOI,EAAMJ,YC3D3CsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.b11e732c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return(\r\n        <form onSubmit={props.submit}>\r\n            <input\r\n            type=\"text\"\r\n            value={props.value}\r\n            onChange={props.change}\r\n            placeholder=\"Wpisz miasto\"\r\n            />\r\n            <button>Wyszukaj miasta</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Result = (props) =>{\r\n    const { date, main, sunrise, sunset, temp, pressure, wind, city, err, } = props.weather\r\n    \r\n    let content = null;\r\n    if (!err && city){\r\n        const sunriseTime = new Date(sunrise*1000).toLocaleTimeString()\r\n        const sunsetTime = new Date(sunset*1000).toLocaleTimeString()\r\n        const tempConvertToCelcius = temp - 273.15;\r\n        content = (\r\n            <div>\r\n                <h3>Wyszukiwanie dla miasta {city.slice(0,1).toUpperCase() + city.slice(1,city.lenght)}</h3>\r\n                <h4>Dane dla dnia i godziny: {date}</h4>\r\n                <h4>Temperatura: {tempConvertToCelcius}</h4>\r\n                <h4>Stan: {main}</h4>\r\n                <h4>Wschód słońca: {sunriseTime}</h4>\r\n                <h4>Ciśnienie {pressure}</h4>\r\n                <h4>Wiatr: {wind}km/h</h4>\r\n            </div>\r\n        )\r\n    }\r\n    return(\r\n        <div className=\"result\">\r\n            {props.error ? `Nie mam w bazie ${city}` : content}\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Result;","import React, { useState } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Result from './Result';\n//Klucz do API\nconst APIKey = 'aad516aaf5fcc1091dab2233f2e03817'\nfunction App() {\n  const [value, setValue] = useState(\"\");\n  const [state, setState] = useState({\n    date: \"\",\n    main: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp:\"\",\n    pressure: \"\",\n    wind: \"\",\n    city: \"\",\n    err: false,\n  })\n  const handleInputChange = (e) => {\n    setValue(e.target.value)\n  }\n\n  const handleCitySubmit = (e) => {\n    e.preventDefault()\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${value}&appid=${APIKey}`;\n\n    fetch(API)\n      .then(response=>{\n        if(response.ok){\n          return response;\n        }else{\n          throw Error(\"Nie udało się\")\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString()\n        setState({\n          error: false,\n          date: time,\n          main: data.weather[0].main,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          city: value,\n        })\n      })\n      .catch(err => {\n        setState({\n          error: true,\n          city: value,\n        })\n      })\n  }\n  return (\n    <div className=\"App\">\n      <Form\n      value={value}\n      change={handleInputChange}\n      submit={handleCitySubmit}\n      />\n      <Result weather={state} error={state.error} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}